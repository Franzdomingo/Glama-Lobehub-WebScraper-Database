--- GLAMA.AI MCP Server - CREATE TABLE Statements Only (ANSI SQL)
-- Main MCP Servers table
CREATE TABLE mcp_servers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    author VARCHAR(255),
    development_language VARCHAR(100),
    license VARCHAR(255),
    download_count BIGINT DEFAULT 0 CHECK (download_count >= 0),
    overview TEXT,
    short_description VARCHAR(1000),
    server_slug VARCHAR(255) NOT NULL UNIQUE,
    glama_url VARCHAR(500),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    scraped_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    mcp_directory_api VARCHAR(1000),
    github_star_count INTEGER DEFAULT 0 CHECK (github_star_count >= 0),
    is_active SMALLINT DEFAULT 1 NOT NULL CHECK (is_active IN (0, 1)),
    CONSTRAINT chk_mcp_servers_name_length CHECK (CHAR_LENGTH(TRIM(name)) > 0)
);

-- Score Summary Table
-- Scores for Glama.ai (using LobeHub format)
CREATE TABLE mcp_server_scores (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mcp_server_id BIGINT NOT NULL,
    -- Only keep Glama.ai-specific score fields
    security_grade VARCHAR(2),
    license_grade VARCHAR(2),
    quality_grade VARCHAR(2),
    has_readme SMALLINT DEFAULT 0 CHECK (has_readme IN (0, 1)),
    has_license SMALLINT DEFAULT 0 CHECK (has_license IN (0, 1)),
    has_glama_json SMALLINT DEFAULT 0 CHECK (has_glama_json IN (0, 1)),
    can_be_inspected SMALLINT DEFAULT 0 CHECK (can_be_inspected IN (0, 1)),
    tools_count SMALLINT DEFAULT 0 CHECK (tools_count >= 0),
    has_known_vulnerabilities SMALLINT DEFAULT 0 CHECK (has_known_vulnerabilities IN (0, 1)),
    is_claimed_by_owner SMALLINT DEFAULT 0 CHECK (is_claimed_by_owner IN (0, 1)),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_mcp_server_scores FOREIGN KEY (mcp_server_id) REFERENCES mcp_servers(id)
);

/*
        Glama.ai mapping for `mcp_server_scores` UI messages / README-style items:
            - has_readme: "Repository has a README.md" (Shows if README.md exists)
            - has_license: "Has no LICENSE" / license status (If missing, show the message: "This repository doesn't have a valid license. Add one by following these steps. MCP servers without a LICENSE cannot be installed.")
            - (optional) license_message: short human-readable license guidance can be stored in an associated notes or message field in the application
            - has_glama_json: "Has no glama.json" (If missing, show guidance: "This repository doesn't have a valid glama.json. Add one by following these steps.")
            - can_be_inspected: "Server can be inspected" (Show link: "View server inspector")
            - tools_count: "Has at least one tool" (e.g., "Server has 5 tools. View")
            - server_schema: description or stored snippet representing detected server schema
            - has_known_vulnerabilities: "Has no known vulnerabilities" (flag indicating safe/unsafe)
            - is_claimed_by_owner: "Claimed by the author" (If true, show claim UI messages)
            - related_mcp_servers_count: "Has no related MCP servers" / count of related servers
            - notes: free-form action items such as "Report Issue"

        These mappings align Glama.ai UI messages with the score table columns. If you want the optional fields (license_message, server_schema, related_mcp_servers_count, notes) added to the SQL schema explicitly, I can add them in a follow-up patch.
*/


-- MCP External Links
CREATE TABLE mcp_links (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mcp_server_id BIGINT NOT NULL,
    link_type VARCHAR(50) NOT NULL,
    url VARCHAR(1000) NOT NULL,
    is_primary SMALLINT DEFAULT 0 CHECK (is_primary IN (0, 1)),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_mcp_links_server FOREIGN KEY (mcp_server_id) REFERENCES mcp_servers(id) ON DELETE CASCADE,
    CONSTRAINT chk_mcp_links_url_length CHECK (CHAR_LENGTH(TRIM(url)) > 0),
    CONSTRAINT chk_mcp_links_type_length CHECK (CHAR_LENGTH(TRIM(link_type)) > 0)
);

-- Server Configuration Environment Variables
CREATE TABLE server_environment_variables (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mcp_server_id BIGINT NOT NULL,
    variable_name VARCHAR(255) NOT NULL,
    is_required SMALLINT DEFAULT 1 CHECK (is_required IN (0, 1)),
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_server_env_vars_server FOREIGN KEY (mcp_server_id) REFERENCES mcp_servers(id) ON DELETE CASCADE,
    CONSTRAINT uk_server_env_vars UNIQUE(mcp_server_id, variable_name),
    CONSTRAINT chk_server_env_vars_name CHECK (CHAR_LENGTH(TRIM(variable_name)) > 0)
);

-- MCP Prompts (Interactive templates invoked by user choice)
CREATE TABLE mcp_prompts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mcp_server_id BIGINT NOT NULL,
    prompt_name VARCHAR(255) NOT NULL,
    prompt_description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_prompts_server FOREIGN KEY (mcp_server_id) REFERENCES mcp_servers(id) ON DELETE CASCADE,
    CONSTRAINT chk_mcp_prompts_name CHECK (CHAR_LENGTH(TRIM(prompt_name)) > 0)
);

-- MCP Resources (Contextual data attached and managed by the client)
CREATE TABLE mcp_resources (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mcp_server_id BIGINT NOT NULL,
    resource_name VARCHAR(255) NOT NULL,
    resource_description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_resources_server FOREIGN KEY (mcp_server_id) REFERENCES mcp_servers(id) ON DELETE CASCADE,
    CONSTRAINT chk_mcp_resources_name CHECK (CHAR_LENGTH(TRIM(resource_name)) > 0)
);

-- MCP Tools (Functions exposed by MCP servers)
CREATE TABLE mcp_tools (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mcp_server_id BIGINT NOT NULL,
    tool_name VARCHAR(255) NOT NULL,
    tool_description TEXT,
    input_schema_json TEXT,
    tool_instructions VARCHAR(1000),
    is_active SMALLINT DEFAULT 1 NOT NULL CHECK (is_active IN (0, 1)),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_tools_server FOREIGN KEY (mcp_server_id) REFERENCES mcp_servers(id) ON DELETE CASCADE,
    CONSTRAINT chk_mcp_tools_name CHECK (CHAR_LENGTH(TRIM(tool_name)) > 0)
);

-- MCP Endpoints table - stores endpoint information for each MCP server
CREATE TABLE mcp_endpoints (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mcp_server_id BIGINT NOT NULL,
    endpoint_content TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_endpoints_server FOREIGN KEY (mcp_server_id) REFERENCES mcp_servers(id) ON DELETE CASCADE
);

-- MCP Input Schema table - stores individual input parameters for MCP tools
CREATE TABLE mcp_input_schema (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mcp_tool_id BIGINT NOT NULL,
    parameter_name VARCHAR(255) NOT NULL,
    is_required SMALLINT DEFAULT 1 CHECK (is_required IN (0, 1)),
    description TEXT,
    -- default_value VARCHAR(1000), not sure comment out for now. 
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_input_schema_tool FOREIGN KEY (mcp_tool_id) REFERENCES mcp_tools(id) ON DELETE CASCADE,
    CONSTRAINT uk_input_schema_tool_param UNIQUE(mcp_tool_id, parameter_name),
    CONSTRAINT chk_input_schema_name CHECK (CHAR_LENGTH(TRIM(parameter_name)) > 0)
);
